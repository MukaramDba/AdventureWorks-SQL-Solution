-----------SQL CLASS------------- 

--------PROBLEM CASES------------

--1. From the HumanResources schema write a query in SQL to retrieve all rows and columns 
--from the employee table in the Adventureworks database. Sort the result set in ascending order on jobtitle.

--2. From the Person.Person table write a query in SQL to retrieve all rows and columns 
--from the PERSON table using table aliasing in the Adventureworks database. Sort the output in ascending order on lastname.

--3. From the Person.Person table write a query in SQL to return all rows and 
--a subset of the columns (FirstName, LastName, businessentityid) 
--from the person table in the AdventureWorks database. The third column heading is renamed to Employee_id. 
--Arranged the output in ascending order by lastname.


--4. From the production.Product table write a query in SQL to return only the rows 
--for product that have a sellstartdate that is not NULL and a productline of 'T'. 
--Return productid, productnumber, and name. Arranged the output in ascending order on name.


--5. From the following table write a query in SQL to return all rows from the Sales.salesorderheader table 
--in Adventureworks database and calculate the percentage of tax on the subtotal have decided. 
--Return salesorderid, customerid, orderdate, subtotal, percentage of tax column. 
--Arranged the result set in ascending order on subtotal.


--6. From the HumanResources.Employee table write a query in SQL to create a list of unique jobtitles in the employee table 
--in Adventureworks database. Return jobtitle column and arranged the resultset in ascending order.

--7. From the sales.salesorderheader table write a query in SQL to calculate the total freight paid by each customer. 
--Return customerid and total freight. Sort the output in ascending order on customerid.

--8. From the sales.salesorderheader table write a query in SQL to find the average and the sum of the subtotal for every customer. 
--Return customerid, average and sum of the subtotal. Grouped the result on customerid and salespersonid. 
--Sort the result on customerid column in descending order.


--9. From the production.productinventory table write a query in SQL to retrieve total quantity of each productid 
--which are in shelf of 'A' or 'C' or 'H'. Filter the results for sum quantity is more than 500. 
--Return productid and sum of the quantity. Sort the results according to the productid in ascending order.

--10. From the production.productinventory table write a query in SQL to find the total quentity 
--for a group of locationid multiplied by 10.
